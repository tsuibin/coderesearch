5天
uc

unix c++ programming

unix提供的所有接口都是c的
可以用c++调用unix 所有的接口
uc api(应用程序编程接口)由操作系统提供的
数据库提供商 也提供一些API
每个系统
可以编程的系统都会提供API
有一款聊天软件叫UC
随便说
随便看
它的内容及其庞大
咱们大家都可以看
怎么看
用它来看 man
man 名字
或者
man -a 名字

man -a mkdir 

这本课跟之前的课程不一样

api就是一些函数 
就是操作系统提供的一些函数
咱们讲的就是函数的用法
讲解和演示函数的用法

这门课跟之前的课不一样了

之前
都是
怎么怎么做

20小时
如果要把它做好的话 120也未必够
大家要有思想准备

uc{
	文件系统{ 
		目录操作
		文件操作}
	多进程{
		进程间的关系
		进程间的通信
		}
	网络通信{
		基本介绍(从需要的地方讲,而不是整套,如果是原理500～600页)
		实践{
			TCP
			UDP
			}	
		}
}
前面讲了
为什么这里还要讲?
这个说法有点欠妥

有两辆车可以一起走
有两条路可以走

有两套方法自然更好

我熟悉的我才可以讲
我不熟悉的我不能讲
我不能耽误大家

linux图形编程
qt
一个专门用于图形编程的工具
一个是kde
还有gtk

用法:
遥控器
开关 上下  开关方那，没有太多的为什么去讲了，为什么呢？大不了说左右大拇指在那，按起来方便

所以只能知道 是什么，怎么用
函数 只能讲 是什么，怎么用
为什么？不为什么，就那么用

如果有为什么，我就说说
不过很多的为什么就是我们的一些猜测

unix内核源码抛析
5天讲完
我们需要记忆
你也可以问其他人 那个人有可能是个老外
可能讲的很多听不懂
我讲的大家可以听得懂

文件
自己的 同组的  外组的
7     5      5
可执行文件的权限 755
普通文件的权限
 6 r4   r4

不希望其他人知道
700或者600
这是常用的几种权限
每个用户有自己的用户
uid 可以通过命令id
每个用户登录之后
第一个启动的程序就是shell
 shell是一个命令解释器
咱们的命令都是它执行的它解释的
咱们把一个正在执行中的程序称作 进程
进行也有一个名字 叫做进程id
pid
整数运算对计算机来说是最容易的事情
操作系统喜欢用id来管理东西

配置文件
配置文件总在自己的主目录下
可以有一些命令
一些环境
我们最常用的环境变量是
PATH(pasi)
有时候不一定要用
比如风扇 再过两个月 就不用风扇了
系统内部使用的
PATH
寻找可执行文件的时候
到哪里去找

一系列目录名
去那一系列目录中去查找

用户信息在哪个文件里面?

/etc/passwd
普通用户只能看

有用户名 。。。。有很多项
还有组信息
组信息在哪个文件里面?
/etc/group
程序一般不关心组
咱们要讲的是文件系统

环境变量
用户信息
文件系统

环境变量 只要想看 随时都能看到
只要一个命令
env

如果我要显示一个环境变量的值
要怎么看?
echo $PWD 
如果要在程序中取得环境变量的内容？

1取得整个环境变量的内容
怎么取得？ 很简单..

XX= ...
环境变量名= 环境变量的值

int main(int argc ,char *argv[], char *env[])

env 有多少个?
编程习惯
如果向一个函数传一个指针数组的时候，如果没有说明元素个数，那么总是用一个NULL放在末尾
以NULL作为结束标志

如果我们要获取一个变量？

环境变量只对本进程和进程有用
几乎在程序里不设置环境变量
只在本进程中用

编程习惯 1
返回指针的函数 ，一般正常返回一个非空指针
出错返回NULL
习惯 2
返回类型是整数的 长短 无符号
正常返回一个非负整数
通常是0 出错返回一个负数 通常是-1

好的习惯是一点点培养出来的 不是生来就有

perror("提示字符串")
提示:错误信息的文字描述

段错误不是异常

opendir
DIR是个什么类型呢？
它是一个类型 是一个结构体
不能定义一个DIR的变量，但是可以定义一个指针


